#!/bin/bash
#
# Script for running the main classes of Strabon. The main classes of Strabon comprises
# QueryOp, StoreOp, etc.
#
# Author: Charalampos (Babis) Nikolaou <charnik@di.uoa.gr>
#

# absolute directory name of this command
LOC="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

RUNTIME="`readlink -f ${LOC}/../runtime`"

function help() {
	echo "Usage: `basename ${0}` [OPTIONS] COMMAND ARGS"
	echo
	echo "Interface to execute the main classes of Strabon, such as QueryOp, StoreOp, UpdateOp, etc."
	echo
	echo "	COMMAND	 : one of \`query', \`update', \`store', or \`help'"
	echo "	ARGS	 : arguments according to selected command"
	echo 
#	echo "OPTIONS can be any of the following"
#	echo "	-d	 : don't run, just print what shall be executed"
}

# runtime package
PKG="eu.earthobservatory.runtime"

# the underlying database to use (one of postgis or monetdb)
DATABASE="postgis"

# the main class to run
CLASS="QueryOp"

# the hostname at which the database runs
HOST="localhost"

# the port at which the database listens
PORT=5432

# the database name to connect to
DB="endpoint"

# the username for the database connection
DBUSER="charnik"

# the password for the database connection
DBPASS="charnik"

# the query to run
QUERY="select (count(*) as ?c) where {?s ?p ?o}"

# debug option for log4j configuration:
#-Dlog4j.debug
#-Dlog4j.configuration=\"${RUNTIME}/log4j.properties\"

CMD="(cd ${RUNTIME} && java -cp ./target/\*:. ${PKG}.${DATABASE}.${CLASS} ${HOST} ${PORT} ${DB} ${DBUSER} ${DBPASS} \"${QUERY}\")"

eval $CMD
exit 1

case "${1}" in
#	-d)
#		shift
#		DEBUG=1
#		;;
#esac

case "${1}" in
	help)
		shift
		if test $# -eq 1; then
			case "${1}" in
				query)
					help_query
					;;
				update)
					help_update
					;;
				store)
					help_store
					;;
				*)
					help
					;;
			esac
			exit 1
		fi
		help
		exit 0
		;;
	query)
		shift
		if ! test $# -eq 2; then
			help_query
			exit 1
		fi
		URL="${1}/Query"
		QUERY="${2}"

		# predefined queries
		case "${QUERY}" in
			size)
				QUERY="SELECT (count(*) as ?c) WHERE {?s ?p ?o}"
				;;
		esac

		# TODO: make it an argument
		FORMAT="XML"

		CMD="curl ${CURL_OPTS} -d format='${FORMAT}' --data-urlencode SPARQLQuery='${QUERY}' ${URL}"
		;;
	update)
		shift
		if ! test $# -eq 2; then
			help_update
			exit 1
		fi
		URL="${1}/Update"
		QUERY="${2}"
		
		# predefined queries
		case "${QUERY}" in
			clear)
				QUERY="DELETE {?s ?p ?o} WHERE {?s ?p ?o}"
				;;
		esac

		CMD="curl ${CURL_OPTS} --data-urlencode SPARQLQuery='${QUERY}' ${URL}"
		;;
	store)
		shift
		if ! test $# -eq 4; then
			help_store
			exit 1
		fi
		URL="${1}/Store"
		FORMAT="${2}"
		case "${3}" in
			-t)
				TRIPLES="${4}"
				CMD="curl ${CURL_OPTS} -d format='${FORMAT}' --data-urlencode data='${TRIPLES}' ${URL}"
				;;
			-u)
				URL_TRIPLES="${4}"
				CMD="curl ${CURL_OPTS} -d format='${FORMAT}' --data-urlencode url='${URL_TRIPLES}' -d fromurl='' ${URL}"
				;;
			 *)
				help_store
				exit 1
				;;
		esac
		;;
	*) 
		help
		echo
		echo "ERROR: Unknown command \"${1}\"."
		exit 1
		;;
esac

# execute or debug
if test $DEBUG -eq 1; then
	echo "`basename ${0}`: Debug is ON"
	echo "`basename ${0}`: Printing command for execution"	
	echo "	$CMD"
else
	eval ${CMD}
fi

